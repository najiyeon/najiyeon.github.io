# you can move this content to front matter of [language]/tabs/projects.md
###########################################################
#                Projects Page Data
###########################################################
page_data:
    main:
        header: "Projects"
        info: "Exploring My Work"
        text_color: "black"
        # if you don't want to use background image, comment it. back_color will be activated.
        img: ":projects-heading.jpg"
        # back_color: "lightblue"
        # back_color: "black"

    category:
        - title: "Python"
          type: id_python
          color: "gray"
        - title: "C"
          type: id_c
          color: "#27374D"
        - title: "Flutter"
          type: id_flutter
          color: "black"
        - title: "CSharp"
          type: id_csharp
          color: "gray"

    list:
        # python
        - type: id_python
          project_name: "Computer Graphics Project 01"
          project_excerpt: "Basic OpenGL viewer"
          img: ":cg_project1.png"
          img_title: "basic opengl viewer"
          date: "2023-04-03"
          post: |
              ## [Project 01 : Basic OpenGL viewer](https://github.com/najiyeon/CSE4020_Computer_Graphics/blob/main/project1/main.py)

              #### Manipulate the camera with mouse movement

              > 1. **Orbit**: Rotate the camera around the target point by changing azimuth / elevation angles. (MMB (mouse middle button) in Blender)
              2. **Pan**: Move both the target point and camera in left, right, up and down direction of the camera. (Shift-MMB in Blender)
              3. **Zoom**: Move the camera forward toward the target point (zoom in) and backward away from the target point. (zoom out) (Ctrl-MMB in Blender)
              4. Toggle **perspective projection / orthogonal projection** by pressing ‘v’ key.
              5. Draw a **rectangular grid** with lines (not polygons) on xz plane as a reference ground plane. (like Blender)

        # python
        - type: id_python
          project_name: "Computer Graphics Project 02"
          project_excerpt: "Obj viewer & drawing a hierarchical model"
          img: ":cg_project2.png"
          img_title: "hierarchical model"
          date: "2023-04-17"
          post: |
              ## [Project 02 : Obj viewer & drawing a hierarchical model](https://github.com/najiyeon/CSE4020_Computer_Graphics/blob/main/project2/main.py)

              #### Implement my own obj file viewer 

              _1) showing a single loaded obj mesh and  2) showing an animation of a hierarchical model consisting of loaded obj meshes. The multiple light sources should be used for rendering._

              > **1. Single mesh rendering mode**
                - Open an obj file by drag-and-drop to your obj viewer window.
                - Read the obj file and display the mesh only using vertex positions, vertex normals, faces information.
                - When open an obj file, print out the following information of the obj file to stdout. (terminal)

              > **2. Animating hierarchical model rendering mode**
                - When a user presses a key ‘h’ on your viewer, your program should run in “animating hierarchical model rendering mode”.
                - The model should consist of at least 3 different meshes loaded from 3 different downloaded obj files.
                - The model should have a hierarchy of 3 levels and each node (except leaf nodes) should have at least 2 child nodes.
                - Animate the model to show the hierarchical structure.

              > **3. Lighting & Etc**
                - Render all object using Phong Illumination and Phong shading.
                - Toggle wireframe / solid mode by pressing ‘z’ key. (similar to pressing ‘z’ key in Blender)

        # C
        - type: id_c
          project_name: "Computer Architecture Project 01"
          project_excerpt: "LC-2K Assembly Language and Assembler & Behavioral Simulator & Assembly-Language Multiplication"
          img: ":ca_project1.png"
          img_title: "assembly language multiplication"
          date: "2023-04-14"
          post: |
              ##### [LC-2K Assembly Language and Assembler & Behavioral Simulator & Assembly-Language Multiplication](https://github.com/najiyeon/ITE2031_Computer_Architecture#lc-2k-instruction-set-architecture)

              This project is intended to help understand the instructions of a very simple assembly language and how to assemble programs into machine language.

              > **1. LC-2K Assembly Language and Assembler**
                - The first part of this project is to write a program to take an assembly-language program and translate it into machine language.

              > **2. Behavioral Simulator**
                - The second part of this assignment is to write a program that can simulate any legal LC-2K machine-code program.

              > **3. Assembly-Language Multiplication**
                - The third part of this assignment is to write an assembly-language program to multiply two numbers.

        # C
        - type: id_c
          project_name: "Operating System Project 01"
          project_excerpt: "Implement simple scheduler on xv6"
          img: ":os_project1.png"
          img_title: "scheduler overview"
          date: "2023-04-23"
          post: |
              #### Project 01 : Implement simple scheduler on xv6

              [**project 1 code**](https://github.com/najiyeon/ELE3021_Operating_System/tree/master/project01/xv6-public)

              [**project 1 wiki**](https://github.com/najiyeon/ELE3021_Operating_System/wiki/Project-01)

        # C
        - type: id_c
          project_name: "Operating System Project 02"
          project_excerpt: "Process Management & LWP"
          img: ":os_project2.png"
          img_title: "process management : memlim"
          date: "2023-05-28"
          post: |
              #### Project 02 : Process Management & LWP

              [**project 2 code**](https://github.com/najiyeon/ELE3021_Operating_System/tree/master/project02/xv6-public)

              [**project 2 wiki**](https://github.com/najiyeon/ELE3021_Operating_System/wiki/Project-02)

        # C
        - type: id_c
          project_name: "Operating System Project 03"
          project_excerpt: "File system"
          img: ":os_project3.png"
          img_title: "triple indirect"
          date: "2023-06-16"
          post: |
              #### Project 03 : File system

              [**project 3 code**](https://github.com/najiyeon/ELE3021_Operating_System/tree/master/project03/xv6-public)

              [**project 3 wiki**](https://github.com/najiyeon/ELE3021_Operating_System/wiki/Project-03)

        # C
        - type: id_c
          project_name: "Compilers Project 01"
          project_excerpt: "Scanner"
          img: ":com_project1.png"
          img_title: "compilers project 1"
          date: "2023-10-16"
          post: |
              #### Project 01 : Scanner

              [**project 1 code**](https://github.com/najiyeon/2023_ELE4029_Compilers/tree/main/1_Scanner)

              [**project 1 wiki**](https://github.com/najiyeon/2023_ELE4029_Compilers/wiki/Compilers-Project-%231-Report)

        # C
        - type: id_c
          project_name: "Compilers Project 02"
          project_excerpt: "Parser"
          img: ":com_project2.png"
          img_title: "compilers project 2"
          date: "2023-11-27"
          post: |
              #### Project 02 : Parser

              [**project 2 code**](https://github.com/najiyeon/2023_ELE4029_Compilers/tree/main/2_Parser)

              [**project 2 wiki**](https://github.com/najiyeon/2023_ELE4029_Compilers/wiki/Compilers-Project-%232-Report)

        # C
        - type: id_c
          project_name: "Compilers Project 03"
          project_excerpt: "Semantic"
          img: ":com_project3.png"
          img_title: "compilers project 3"
          date: "2023-12-19"
          post: |
              #### Project 03 : Semantic

              [**project 3 code**](https://github.com/najiyeon/2023_ELE4029_Compilers/tree/main/3_Semantic)

              [**project 3 wiki**](https://github.com/najiyeon/2023_ELE4029_Compilers/wiki/Compilers-Project-%233-Report)

        # Flutter
        - type: id_flutter
          project_name: "InfoSynth"
          project_excerpt: "An app crafted using Flutter (Dart), Node"
          img: ":InfoSynth.png"
          img_title: "InfoSynth"
          date: "2024-01-04"
          post: |
              #### InfoSynth

              > **App Overview**
                - InfoSynth is an application designed to assist users who have been exposed to biased or limited information in acquiring objective and diverse perspectives. Operating primarily based on YouTube videos, users can input the URL of a YouTube video, and the app will crawl the script of the video to provide related articles.

              [**InfoSynth source code**](https://github.com/InfoSynth/InfoSynth)

        # Flutter
        - type: id_flutter
          project_name: "MO HAJI"
          project_excerpt: "An app developed utilizing Flutter (Dart), Node.js, MySQL, AWS EC2, and S3, along with Google Vision API, OpenAI API, and Naver Search API."
          img: ":MOHAJI.png"
          img_title: "MO-HAJI"
          date: "2024-01-11"
          post: |
              #### MO HAJI

              > **App Overview**
                - MO HAJI is an application that provides recipe, allergy information, and nearby restaurant recommendations with just one food photo.

              [**MO-HAJI source code**](https://github.com/MO-HAJI/MO-HAJI)

        # C#
        - type: id_csharp
          project_name: "After School; 3D choorigame"
          project_excerpt: "An app crafted using Unity (C#)"
          img: ":choorigame.png"
          img_title: "choorigame"
          date: "2024-01-18"
          post: |
              #### After School; 3D choorigame

              > **App Overview**
                - "After School; 3D Mystery Game" is a 3D mystery game implemented in Unity, based on the debut work "After School" by the famous Japanese novelist Keigo Higashino. Acquire clues to uncover the secrets of the locked room and find the culprit!

              [**After-School source code**](https://github.com/After-School-2023/After_School)
